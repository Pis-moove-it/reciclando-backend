swagger: '2.0'
info:
  title: Reciclando
  version: 1.0.0
produces:
  - application/json
externalDocs:
  description: "Reciclando Invision"
  url: "https://projects.invisionapp.com/share/5RNT0ZQQUPM#/screens"
tags:
  - "Users"
  - "Bales"
  - "Containers"
  - "Collections"
  - "Routes"

paths:
  /organizations/{organization_id}/users:
    get:
      tags:
        - "Users"
      operationId: getUsersFromOrganization
      summary: List users from an organization.
      parameters:
        - in: path
          name: organization_id
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        401:
          description: Unauthorized request.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: An organization with the specified ID was not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /organizations/{organization_id}/users/{id}:
    get:
      tags:
        - "Users"
      operationId: getAUserFromAnOrganization
      summary: Get one user from an organization.
      parameters:
        - in: path
          name: organization_id
          required: true
          type: integer
        - in: path
          name: id
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
        404:
          description: An organization or user with the specified ID was not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /organizations/{organization_id}/users/{id}/login:
    post:
      tags:
        - "Users"
      operationId: userEnterSystem
      summary: User enter to the app.
      parameters:
        - in: path
          name: organization_id
          required: true
          type: integer
        - in: path
          name: id
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
        401:
          description: Unauthorized request.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: An organization or user with the specified ID was not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
      security:
      - ApiKey: []

  /organizations/login:
    post:
      tags:
        - "Organizations"
      operationId: organizationLogin
      summary: Organization Login.
      parameters:
        - in: body
          name: name
          required: true
          type: string
        - in: body
          name: password
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Organization'
          headers:
            ApiKey:
              type: string
        400:
          description: Malformed request.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Organization not found by the given name.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /bales:
    get:
      tags:
        - "Bales"
      operationId: getBales
      summary: List bales.
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Bale'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - "Bales"
      operationId: createBale
      summary: Create a bale.
      parameters:
        - in: body
          name: bale
          schema:
            $ref: '#/definitions/Bale'
      responses:
        200:
          description: OK
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /bales/{bale_id}:
    get:
      tags:
        - "Bales"
      operationId: getBale
      summary: Get one bale.
      parameters:
        - in: path
          name: bale_id
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Bale'
        404:
          description: A bale with the specified ID was not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - "Bales"
      operationId: updateBale
      summary: Update a bale.
      parameters:
        - in: path
          name: bale_id
          required: true
          type: integer
        - in: body
          name: bale
          schema:
            $ref: '#/definitions/Bale'
      responses:
        200:
          description: OK
        404:
          description: A bale with the specified ID was not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /bales/show_by_material:
    get:
      tags:
        - "Bales"
      operationId: showBalesByMaterial
      summary: Return all bales which matches certain material.
      parameters:
        - in: header
          name: ApiKey
          required: true
          type: string
        - in: query
          name: material
          required: true
          type: string
          enum: ['Trash', 'Glass', 'Plastic']
      responses:
        200:
          description: OK
        400:
          description: Bad request.
        401:
          description: Unauthorized request.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /bales/show_by_date:
    get:
      tags:
        - "Bales"
      operationId: showBalesByDate
      summary: Return all the bales contains in the range of dates.
      parameters:
        - in: header
          name: ApiKey
          required: true
          type: string
        - in: query
          name: init_date
          required: true
          type: string
          format: date
        - in: query
          name: end_date
          required: true
          type: string
          format: date
      responses:
        200:
          description: OK
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized request.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /pockets:
    get:
      tags:
        - "Pockets"
      operationId: getUnclassifiedPockets
      summary: List unclassified pockets.
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/UnclassifiedPocket'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /pockets/{pocket_id}/edit_serial_number:
    put:
      tags:
        - "Pockets"
      operationId: editSerialNumber
      summary: Edit the serial number of a pocket.
      parameters:
        - in: path
          name: pocket_id
          required: true
          type: integer
        - in: header
          name: ApiKey
          required: true
          type: string
        - in: body
          name: serial_number
          required: true
          type: string
      responses:
        200:
          description: Ok
        404:
          description: A pocket with specified Id was not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /pockets/{pocket_id}/edit_weight:
    put:
      tags:
        - "Pockets"
      operationId: editWeight
      summary: Edit the weight of weighed pockets.
      parameters:
        - in: path
          name: pocket_id
          required: true
          type: integer
        - in: body
          name: weight
          required: true
          type: float
      responses:
        200:
          description: Ok
        404:
          description: A pocket with specified Id was not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /pockets/{pocket_id}/add_weight:
    put:
      tags:
        - "Pockets"
      operationId: addWeight
      summary: Add the weight of unweighed pockets.
      parameters:
        - in: path
          name: pocket_id
          required: true
          type: integer
        - in: header
          name: ApiKey
          required: true
        - in: body
          name: weight
          required: true
          type: number
      responses:
        200:
          description: Ok
        404:
          description: A pocket with specified Id was not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /containers/{container_id}:
    put:
      tags:
        - "Containers"
      operationId: updateContainer
      summary: Update the container status.
      parameters:
        - in: path
          name: container_id
          required: true
          type: integer
        - in: body
          name: container
          schema:
            $ref: '#/definitions/Container'
      responses:
        200:
          description: Ok
        400:
          description: A container with specified Id was not found.
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized request.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /routes/{route_id}/collections:
    post:
      tags:
        - "Collections"
      operationId: addPocket
      summary: Add a pocket.
      parameters:
        - in: path
          name: route_id
          required: true
          type: integer
        - in: body
          name: collection
          schema:
            $ref: '#/definitions/Collection'
      responses:
        200:
          description: OK
        404:
          description: A route with the specified ID was not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /routes:
    post:
      tags:
        - "Routes"
      operationId: createRoute
      summary: Create a route.
      responses:
        200:
          description: OK
        401:
          description: Unauthorized request.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

  /questions:
    get:
      tags:
        - "Questions"
      operationId: getQuestions
      summary: Get six random questions.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Question'
        500:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

definitions:
  Organization:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
    required:
      - id
      - name
  User:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      surname:
        type: string
      ci:
        type: string
      email:
        type: string
    required:
      - id
      - name
      - surname
      - ci
      - email
  Bale:
    type: object
    required:
      - weight
      - material
    properties:
      weight:
        type: number
      material:
        type: string
        enum:
          - Trash
          - Glass
          - Plastic
    example:
      weight: 13.7
      material: Glass
  UnclassifiedPocket:
    type: object
    properties:
      id:
        type: integer
      serial_number:
        type: string
      weight:
        type: float
      state:
        enum:
        - "Unweighed"
        - "Weighed"
  ClassifiedPocket:
    type: object
    properties:
      id:
        type: integer
      serial_number:
        type: string
      weight:
        type: float
      state:
        enum:
        - "Classified"
  Container:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - Ok
            - Damaged
            - Removed
      example:
        status: Ok
  Collection:
    type: object
    required:
      - collection_point_id
      - pockets_attributes
    properties:
      collection_point_id:
        type: integer
      pockets_attributes:
        type: array
        items:
          type: object
          properties:
            serial_number:
              type: string
    example:
      collection_point_id: 1
      pocket_attributes: [{"serial_number": "B05"},
                          {"serial_number": "B18"}]
  Error:
    type: object
    properties:
      http_status:
        type: "integer"
      description:
        type: string
      details:
        type: string
  Question:
    type: object
    properties:
      id:
        type: "integer"
      question:
        type: string
      option_a:
        type: string
      option_b:
        type: string
      option_c:
        type: string
      option_d:
        type: string
      correct_option:
        type: string
